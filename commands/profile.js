module.exports = {
    name: "profile",
    alias: ["profile", "prof"],
    usage: "!<alias> (optional) <function> (optional) <link || function> (optional) <mode || image>",
    example: `!profile
!profile update || level || xp -- https://image.jpg
!profile update embed true || false`,
    description: "Lets people see what level and other stuff they have like xp from the database",
    // eslint-disable-next-line no-unused-vars
    async execute(msg, args, bot, interaction, player) {
        //---------------------------------------------------------
        const Discord = require("discord.js");
        const { Client } = require("pg");
        const jsonfile = require("jsonfile"); // eslint-disable-line
        const jimp = require("jimp");
        //---------------------------------------------------------

        //---------------------------------------------------------
        // Connecting to the database
        const client = new Client({
            connectionString: process.env.DATABASE_URL,
            ssl: {
                rejectUnauthorized: false,
            },
        });

        client.connect();
        //---------------------------------------------------------

        //---------------------------------------------------------
        // Creating a table if there is none
        const table_photos = `CREATE TABLE IF NOT EXISTS photos(
            id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            data JSONB NOT NULL
        )`;

        client.query(table_photos);
        //---------------------------------------------------------

        // Getting data about user photo
        var { rows } = await client.query("SELECT data FROM photos"); // eslint-disable-line
        var guild = rows[0].data;
        // if(JSON.stringify(guild).length < 10) guild = {};
        // else guild = JSON.parse(JSON.stringify(guild).slice(9, JSON.stringify(guild).length-2));
        //---------------------------------------------------------------

        if (interaction) {
            msg = {
                guildId: interaction.guildId,
                guild: interaction.guild,
                author: {
                    id: interaction.member.id,
                    username: interaction.member.user.username,
                },
                channel: interaction.channel,
            };
        }

        if (msg.guildId in guild === false)
            guild[msg.guildId] = {
                name: msg.guild.name,
            };

        var user = guild[msg.guildId];

        if (msg.author.id in user === false) {
            user[msg.author.id] = {
                name: msg.author.username,
                user_id: msg.author.id,
                photo: "https://i.pinimg.com/474x/64/89/35/64893517cd0fad84c451c85b135ee091.jpg",
                embed: true,
            };
            await client
                .query("UPDATE photos SET data = '" + JSON.stringify(guild) + "'")
                .then(console.log("Succesfully added new user into table photos."))
                .catch((err) => console.error(err));
        }

        //console.log(user);
        var photo = user[msg.author.id];
        //---------------------------------------------------------------

        //---------------------------------------------------------------
        // Getting statistic about player expierience
        var { rows } = await client.query("SELECT data FROM users"); //eslint-disable-line
        var stats = rows[0].data;
        //---------------------------------------------------------------

        var serverStats = stats[msg.guildId];
        var userStats = serverStats[msg.author.id];

        // Var for holding the earlier photo
        var check = photo.photo;

        var subCommandGroup;
        var command;
        var option;
        if(interaction){
            try {
                subCommandGroup = interaction.options.data[0].name; // check
                command = interaction.options.data[0].options[0].name; //profile
                option = interaction.options.data[0].options[0].value; //True || False
            } catch (error) {
                await interaction.editReply('Wrong command formulation!');
                return;
            }

        }


        if (
            (!args[1] && !interaction) ||
            command === "profile"
        ) {
            if (photo.photo.endsWith(".gif") || photo.embed === true) {
                //-------------------------------------------------------------------------------------------------------------------------
                // Making an Embed
                var embed = new Discord.MessageEmbed()
                    .setImage(photo.photo)
                    .setAuthor(msg.author.username)
                    .setColor("RANDOM")
                    .setTitle("Informacija apie tave")
                    .setThumbnail(
                        interaction ? interaction.member.user.avatarURL() : msg.author.avatarURL()
                    )
                    .addField("Dabartinis XP: ", userStats.CurrentXp.toString(), true)
                    .addField("Visas XP: ", userStats.OverallXp.toString(), true)
                    .addField("Tavo dabartinis lygis yra: ", userStats.level.toString(), true)
                    .addField("Iki kito lygio tau trūksta: ", userStats.xpToNextLevel.toString(), true)
                    .setFooter(
                        "Tu gali pakeisti arba pašalinti didžiają nuotrauką! ",
                        bot.user.avatarURL()
                    );
                //-------------------------------------------------------------------------------------------------------------------------

                if (interaction) interaction.editReply({ embeds: [embed] });
                else msg.channel.send({ embeds: [embed] });

                return client.end();
            }

            //---------------------------------------------------------------------------------------------------------------------------
            // Loading in prefered image of a user and applying cover on to it
            await jimp
                .read(photo.photo, async (err, image) => {
                    if (err)
                        return interaction
                            ? interaction.editReply("Something went wrong!")
                            : msg.reply("Įvyko klaida!");
                    //------------------------------------
                    var percentage = (userStats.CurrentXp * 100) / userStats.Next_Level_At;
                    var text = `${Math.floor(percentage)}%`;
                    //------------------------------------
                    var font = await jimp
                        .loadFont("./stuff/font.fnt")
                        .catch((e) => console.log("error loading font.fnt" + e));
                    var font1 = await jimp
                        .loadFont("./stuff/pepsi.fnt")
                        .catch((e) => console.log("error loading pepsi.fnt" + e));
                    var level_font = await jimp
                        .loadFont("./stuff/level_font.fnt")
                        .catch((e) => console.log("error loading level_font.fnt" + e));
                    var profile_image = await jimp
                        .read(
                            interaction
                                ? interaction.member.user.avatarURL({ format: "png" })
                                : msg.author.avatarURL({ format: "png" })
                        )
                        .catch((e) => console.log("error reading author avatar photo " + e));
                    var background = await jimp
                        .read("./stuff/photoFrame.png")
                        .catch((e) => console.log("error reading photoframe.png" + e));
                    var line = await jimp
                        .read("./stuff/purple.jpg")
                        .catch((e) => console.log("error reading purple.png" + e));
                    line.resize(percentage * 1.77, 14).opacity(0.75);
                    profile_image.resize(80, 80);
                    background
                        .opacity(0.6)
                        .composite(line, 130, 21)
                        .composite(profile_image, 15, 15)
                        .print(font, 210, 20, text, 100, 8)
                        .print(
                            font1,
                            /*130-310 */ 127,
                            -2,
                            {
                                text: msg.author.username,
                                alignmentX: await jimp.HORIZONTAL_ALIGN_CENTER,
                            },
                            185,
                            -2
                        )
                        .print(font, 185, 37, `${userStats.CurrentXp}/${userStats.Next_Level_At}`)
                        .print(level_font, 152, 40, `Level ${userStats.level}`);

                    image.resize(480, 270).composite(background, 20, 20);

                    const buffer = await image.getBufferAsync(jimp.MIME_PNG);

                    if (interaction)
                        await interaction.editReply({ files: [{ attachment: buffer }] });
                    else await msg.reply({ files: [{ attachment: buffer }] });
                })
                .catch((err) => {
                    if (err)
                        return interaction
                            ? interaction.editReply("Error occurred!")
                            : msg.reply("Error occurred!");
                });

            return client.end();
        } else if (
            !interaction &&
            (args[1].toLowerCase() === "xp" || args[1].toLowerCase() === "exp")
        ) {
            msg.reply(
                `Tu dabar turi **${userStats.CurrentXp}**, iš viso turi **${userStats.OverallXp}**`
            );
            return client.end();
        } else if (
            !interaction &&
            (args[1].toLowerCase() === "level" ||
                args[1].toLowerCase() === "lygis" ||
                args[1].toLowerCase() === "l" ||
                args[1].toLowerCase() === "lvl")
        ) {
            msg.reply(
                `Tavo lygis yra **${userStats.level}**, tau trūksta dar **${userStats.xpToNextLevel}** iki kito lygio!`
            );
            return client.end();
        } else if (
            subCommandGroup === "update" ||
            (!interaction && (args[1].toLowerCase() === "update" || args[1].toLowerCase() === "-u"))
        ) {
            if (!args[2] && !interaction) {
                msg.reply(
                    "Prašome pasirinkti kokią nuotrauką norite naudoti, nuotrauka turi būti iš interneto URL formatu."
                );
                return client.end();
            } else if (
                command === "pc" || 
                !interaction && args[2].toLowerCase() === "pc"
            ) {
                if (interaction)
                    await interaction.editReply("You have 10 seconds to add a picture!");
                else await msg.reply("You have 10 seconds to add a picture!");

                const filter = (m) => {
                    if (msg.author.id === m.author.id) {
                        if (m.attachments.size === 1) {
                            m.attachments.forEach((file) => {
                                (photo.photo = file.url);
                                console.log("Got photo!");
                            });
                        } else m.reply("Turite pridėti nuotrauką.");
                    }
                };
                await msg.channel.awaitMessages({filter,  max: 6, time: 10000 }); // might need to do 10_000
            } else if (!interaction && args[2].toLowerCase() === "embed") {
                if (!args[3]) msg.reply(photo.embed);

                if (
                    args[3].toLowerCase() === "true" ||
                    args[3].toLowerCase() === "treu" ||
                    args[3].toLowerCase() === "t" ||
                    args[3].toLowerCase() === "tru"
                )
                    photo.embed = true;
                else if (
                    args[3].toLowerCase() === "false" ||
                    args[3].toLowerCase() === "fal" ||
                    args[3].toLowerCase() === "f" ||
                    args[3].toLowerCase() === "fals" ||
                    args[3].toLowerCase() === "flase"
                )
                    photo.embed = false;

                await client
                    .query("UPDATE photos SET data = '" + JSON.stringify(guild) + "'")
                    .then(console.log("Done"))
                    .catch((err) => {
                        msg.reply("Atsiprašome kažkas nepavyko.");
                        console.log(err);
                        return client.end();
                    });

                msg.reply(`Embed Pakeistas. Statusas **${photo.embed}**`);

                return client.end();
            } else if (
                (!interaction && 
                (args[2].toLowerCase() === "remove" ||
                args[2].toLowerCase() === "-r" ||
                args[2].toLowerCase() === "r" ||
                args[2].toLowerCase() === "re" ||
                args[2].toLowerCase() === "rem")) ||
                (command === "remove" &&
                    option === true)
            ) {
                photo.photo = "";

                await client
                    .query("UPDATE photos SET data = '" + JSON.stringify(guild) + "'")
                    .then(console.log("Done"))
                    .catch((err) => {
                        console.log(err);
                        interaction
                            ? interaction.editReply("Error")
                            : msg.reply("Atsiprašome kažkas nepavyko.");
                        return client.end();
                    });

                if (interaction) interaction.editReply("Photo has been removed!");
                else msg.reply("Jūsų nuotrauka pašalinta");

                return client.end();
            } else if (
                (!interaction && 
                ((args[2].startsWith("https") && args[2].endsWith(`.jpg`)) ||
                (args[2].startsWith("https") && args[2].endsWith(`.png`)) ||
                (args[2].startsWith("https") && args[2].endsWith(`.gif`)))) ||
                (command === "link" &&
                    option.match(
                        /^https.*.gif$|^https.*.jpg$|^https.*.png$/gim
                    ))
            ) {
                if (interaction) photo.photo = option;
                else photo.photo = args[2];
            } else {
                if (interaction) interaction.editReply("Photo does not meet the condition!");
                else msg.reply(`Netinkama nuoroda.`);

                return client.end();
            }

            await client
                .query("UPDATE photos SET data = '" + JSON.stringify(guild) + "'")
                .then(console.log("Done"))
                .catch((err) => {
                    interaction
                        ? interaction.editReply("Error")
                        : msg.reply("Atsiprašome kažkas nepavyko.");
                    console.log(err);
                    return client.end();
                });

            if (check !== photo.photo) {
                if (interaction) interaction.editReply("Photo has been updated!");
                else {
                    if (args[2].toLowerCase() !== "pc") await msg.channel.bulkDelete(1);
                    msg.reply("Jūsų nuotrauka atnaujinta.");
                }
            } else if (interaction)
                interaction.editReply("Photo was the same as previous yet has not changed!");
            else msg.reply("Nuotrauka liko tokia pati.");

            return client.end();
        } else if (
            (!interaction && msg.mentions.users.first() && !args[2]) ||
            command === "user"
        ) {
            try {
                var userCheck;

                if (interaction) {
                    const time = new Date();
                    var hours;
                    if (time.getHours() + 3 >= 24) hours = time.getHours() + 3 - 24;

                    userCheck = serverStats[interaction.options.data[0].options[0].value];

                    embed = new Discord.MessageEmbed()
                        .setAuthor(msg.author.username, interaction.member.user.avatarURL())
                        .setColor("RANDOM")
                        .setFooter(
                            `Tikrinta: ${
                                hours + ":" + time.getMinutes() + ":" + time.getSeconds()
                            }`,
                            bot.user.avatarURL()
                        )
                        .setThumbnail(
                            bot.users.cache
                                .get(interaction.options.data[0].options[0].value)
                                .avatarURL()
                        )
                        .setTitle(
                            `Informacija apie **${
                                msg.guild.members.cache.get(
                                    interaction.options.data[0].options[0].value
                                ).user.username
                            }**`
                        )
                        .addField("Vardas", userCheck.name.toString(), true)
                        .addField("Lygis", `${userCheck.level.toString()}`, true)
                        .addField("Visas XP", `${userCheck.OverallXp.toString()}`, true)
                        .addField("Išsiųsta žinučių", `${userCheck.MessagesSent.toString()}`, true)
                        .addField(
                            "Žinučių ilgis nuo *2021-01-18* ",
                            `${userCheck.MessageLength}`,
                            true
                        );

                    await interaction.editReply({ embeds: [embed] });
                } else {
                    userCheck = serverStats[msg.mentions.users.first().id];
                    embed = new Discord.MessageEmbed()
                        .setAuthor(msg.author.username, msg.author.avatarURL())
                        .setColor("RANDOM")
                        .setFooter(
                            `Tikrinta: ${
                                msg.createdAt.getHours() +
                                3 +
                                ":" +
                                msg.createdAt.getMinutes() +
                                ":" +
                                msg.createdAt.getSeconds()
                            }`,
                            bot.user.avatarURL()
                        )
                        .setThumbnail(
                            msg.guild.members.cache
                                .get(msg.mentions.users.first().id)
                                .user.avatarURL()
                        )
                        .setTitle(`Informacija apie **${msg.mentions.users.first().username}**`)
                        .addField("Vardas", userCheck.name, true)
                        .addField("Lygis", `${userCheck.level.toString()}`, true)
                        .addField("Visas XP", `${userCheck.OverallXp.toString()}`, true)
                        .addField("Išsiųsta žinučių", `${userCheck.MessagesSent.toString()}`, true)
                        .addField(
                            "Žinučių ilgis nuo *2021-01-18* ",
                            `${userCheck.MessageLength.toString()}`,
                            true
                        );

                    await msg.reply({ embeds: [embed] });
                }
            } catch (error) {
                console.log(error);
                interaction
                    ? interaction.editReply("Error")
                    : msg.reply("Atsiprašome kažkas nepavyko.");
            }
        }else if (subCommandGroup === 'embed'){
            if(command === 'status'){
                interaction.editReply(photo.embed.toString());
                return client.end();
            }

            if(command === 'set'){
                photo.embed = option;
                interaction.editReply('Embed status updated to ' + photo.embed.toString());
            }

            await client
            .query("UPDATE photos SET data = '" + JSON.stringify(guild) + "'")
            .then(console.log("Done"))
            .catch((err) => {
                interaction.editReply("Something went wrong while trying to update your options!");
                console.log(err);
                return client.end();
            });

            return client.end();
        } else {
            interaction
                ? interaction.editReply("Wrong input")
                : msg.reply("Netinkamai suformuota komanda!");
            return client.end();
        }
    },
};
