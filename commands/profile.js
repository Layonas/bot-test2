module.exports = {
    name: 'profile',
    alias: ['profile', 'prof'],
    description: 'Lets people see what level and other stuff they have like xp from the database',
    async execute(msg, args, BotID){
        //---------------------------------------------------------
        const { RichEmbed } = require('discord.js');
        const { Client } = require('pg');
        const jsonfile = require('jsonfile'); // eslint-disable-line
        //---------------------------------------------------------

        //---------------------------------------------------------
        // Connecting to the database
        const client = new Client({
            connectionString: process.env.DATABASE_URL,
            ssl: {
                rejectUnauthorized: false,
            }
        });

        client.connect();
        //---------------------------------------------------------

        //---------------------------------------------------------
        // Creating a table if there is none
        const table_photos = `CREATE TABLE IF NOT EXISTS photos(
            id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            data JSONB NOT NULL
        )`;

        client.query(table_photos);
        //---------------------------------------------------------

                    // Getting data about user photo
                    var { rows } = await client.query('SELECT data FROM photos'); // eslint-disable-line
                    var guild = rows;
                    if(JSON.stringify(guild).length < 10) guild = {};
                    else guild = JSON.parse(JSON.stringify(guild).slice(9, JSON.stringify(guild).length-2));
                    //---------------------------------------------------------------
        
                    if(msg.guild.id in guild === false) guild[msg.guild.id] = {
                        name: msg.guild.name,
                    };
        
                    var user = guild[msg.guild.id];
        
                    if(msg.author.id in user === false) 
                    {
                    user[msg.author.id] = {
                        name: msg.author.username,
                        user_id: msg.author.id,
                        photo: 'https://i.pinimg.com/474x/64/89/35/64893517cd0fad84c451c85b135ee091.jpg'
                    };
                    await client.query('DELETE FROM photos');
                    await client.query('INSERT INTO photos(data) VALUES($1)', [guild]).then(console.log('Succesfully added new user into table photos.')).catch(err => console.error(err));
                }
        
                    var photo = user[msg.author.id];
        //---------------------------------------------------------------

             //---------------------------------------------------------------
            // Getting statistic about player expierience
            var { rows } = await client.query('SELECT data FROM users'); //eslint-disable-line
            var stats = rows;
            var new_stats = JSON.stringify(stats);
            stats = await JSON.parse(new_stats.slice(9, new_stats.length-2));
            //---------------------------------------------------------------

            var serverStats =  stats[msg.guild.id];
            var userStats = serverStats[msg.author.id];

        if(!args[1]){

            var embed = new RichEmbed()
            .setImage(photo.photo)
            .setAuthor(msg.author.username)
            .setColor('RANDOM')
            .setTitle('Informacija apie tave')
            .setThumbnail(msg.author.avatarURL)
            .addField('Dabartinis XP: ', userStats.CurrentXp, true).addField('Visas XP: ', userStats.OverallXp, true)
            .addField('Tavo dabartinis lygis yra: ', userStats.level, true)
            .addField('Iki kito lygio tau trūksta: ', userStats.xpToNextLevel, true)
            .setFooter('Tu gali pakeisti arba pašalinti didžiają nuotrauką! ', msg.guild.members.get(BotID).user.avatarURL);

            msg.channel.send(embed);
            return client.end();
        } else if(args[1].toLowerCase() === 'xp'){

            msg.reply(`Tu dabar turi **${userStats.CurrentXp}**, iš viso turi **${userStats.OverallXp}**`);

            return client.end();
        } else if(args[1].toLowerCase() === 'level' || args[1].toLowerCase() === 'lygis' || args[1].toLowerCase() === 'l' ||args[1].toLowerCase() === 'lvl'){

            msg.reply(`Tavo lygis yra **${userStats.level}**, tau trūksta dar **${userStats.xpToNextLevel}** iki kito lygio!`);

            return client.end();
        }else if(args[1].toLowerCase() === 'update' || args[1].toLowerCase() === '-u'){

            if(!args[2]) {
                msg.reply('Prašome pasirinkti kokią nuotrauką norite naudoti, nuotrauka turi būti iš interneto URL formatu.');
                return client.end();
            }

            if (args[2].toLowerCase() === 'remove' || args[2].toLowerCase() === '-r' || args[2].toLowerCase() === 'r' || args[2].toLowerCase() === 're' || args[2].toLowerCase() === 'rem'){

                photo.photo = '';
                await client.query('DELETE FROM photos');
                await client.query('INSERT INTO photos(data) VALUES($1)', [guild]).then(console.log('Succesfully added new user into table photos.')).catch(err => console.error(err));

                msg.reply('Jūsų nuotrauka pašalinta');

                return client.end();
            }

                if(args[2].startsWith('https') && args[2].endsWith(`.jpg`) || args[2].startsWith('https') && args[2].endsWith(`.png`) || args[2].startsWith('https') && args[2].endsWith(`.gif`)) photo.photo = args[2];
                else {
                    msg.reply(`Netinkama nuoroda.`);
                    return client.end();
                }

                await client.query('DELETE FROM photos');
                await client.query('INSERT INTO photos(data) VALUES($1)', [guild]).then(console.log('Succesfully added new user into table photos.')).catch(err => console.error(err));
                
                await msg.channel.bulkDelete(1);
                msg.reply('Jūsų nuotrauka atnaujinta.');

                //jsonfile.writeFileSync('./functions/JsonFiles/photos.json', guild, {spaces: 5});

            return client.end();
        }else {
            msg.reply('Netinkamai suformuota komanda!');
            return client.end();
        }

    }
};