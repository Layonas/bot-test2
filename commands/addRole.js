module.exports = {
    name: 'addRole',
    alias: ['addRole', 'aR', 'Roleadd', 'ar', 'arole', 'ARole', 'Arole', 'addrole', 'add_role'],
    usage: `!<alias> <name> <min_level> <max_level> <color>`,
    example: '!addRole',
    description: 'Adds a role to the database and auto updates the bot with new roles.',
    async execute(bot, interaction){ // eslint-disable-line
        //-------------------------------------------------
        const {Client} = require('pg');
        const jsfile = require('jsonfile'); // eslint-disable-line
        //-------------------------------------------------

        if (interaction.member.id !== process.env.USER_OWNER)
            return await interaction.editReply(`You don't have rights!`);
        //-------------------------------------------------
        //Connencting to the database
        const client = new Client({
            connectionString: process.env.DATABASE_URL,
            ssl: {
                rejectUnauthorized: false
            }
            });

        client.connect();
        //-------------------------------------------------

        // Creating a table
        var createTableRoles = `CREATE TABLE IF NOT EXISTS Roles(
            id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            roles json NOT NULL
            )`;

        await client.query(createTableRoles);

        //-------------------------------------------------
        // Extracting info from DB
        const {rows} = await client.query(`SELECT * FROM Roles`);

        var Roles = {}; 

        try {
            Roles = rows[0].roles;
        } catch (error) {
            Roles = {};
        }

        //one time use to add existing roles
        //Roles = jsfile.readFileSync('./functions/JsonFiles/Roles.json');
        //-------------------------------------------------

        const Role_name = interaction.options.data[0].value;
        
        if(interaction.options.data[1].value in Roles === false){ // checks whether the level is already in the database
            Roles[interaction.options.data[1].value] = {
                name: '',
                min_level: 0,
                max_level: 0,
                color: '',
                position: 0,
                index: 1
            };
        }   

        const level = interaction.options.data[1].value;
        Roles[level].name = Role_name;
        Roles[level].min_level = interaction.options.data[1].value;
        Roles[level].max_level = interaction.options.data[2].value;
        Roles[level].color = interaction.options.data[3].value;
        Roles[level].position = 1;


        // one time use to push existing roles to DB
        //await client.query('DELETE FROM Roles');
        //await client.query('INSERT INTO Roles(roles) values($1)', [Roles]);
        await client.query("UPDATE Roles SET roles = '" + JSON.stringify(Roles) + "'").then(async () => {
            interaction.editReply("Added new role to the database: " + Role_name);
        }).catch(err => console.log(err));

        //jsfile.writeFileSync('./functions/JsonFiles/Roles.json', Roles, {spaces: 2});

        client.end();
    }
};